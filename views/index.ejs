<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Radio YouTube Streamer</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;600&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <style>
        body {
            font-family: 'JetBrains Mono', monospace;
            background: linear-gradient(to bottom right, #1a1a2e, #16213e);
            min-height: 100vh;
        }
        .log-entry {
            font-family: 'JetBrains Mono', monospace;
            transition: all 0.2s;
        }
        .log-entry:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }
        #logsContent::-webkit-scrollbar {
            width: 8px;
        }
        #logsContent::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
        }
        #logsContent::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 4px;
        }
        #logsContent::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.3);
        }
        .ffmpeg-command {
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            padding: 8px;
            margin: 8px 0;
            font-size: 0.8em;
            white-space: pre-wrap;
            word-break: break-all;
        }
    </style>
</head>
<body class="text-gray-200">
    <div class="container mx-auto px-4 py-8">
        <div class="max-w-4xl mx-auto">
            <!-- Header -->
            <div class="flex items-center justify-between mb-8">
                <h1 class="text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent">
                    Radio YouTube Streamer
                </h1>
                <div id="streamStatus" class="px-4 py-2 rounded-full text-sm font-semibold bg-gray-800">
                    Waiting...
                </div>
            </div>

            <!-- Main Content -->
            <div class="grid gap-6">
                <!-- Stream Controls -->
                <div class="bg-gray-800/50 rounded-lg p-6 backdrop-blur-sm">
                    <h2 class="text-xl font-semibold mb-4">Stream Controls</h2>
                    <div class="grid gap-4">
                        <div>
                            <label class="block text-sm font-medium mb-2">Stream Key</label>
                            <input type="password" id="streamKey" class="w-full bg-gray-900 border border-gray-700 rounded px-3 py-2 focus:outline-none focus:border-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">Audio URL</label>
                            <input type="text" id="audioUrl" class="w-full bg-gray-900 border border-gray-700 rounded px-3 py-2 focus:outline-none focus:border-blue-500">
                        </div>
                        <div class="flex gap-4">
                            <button id="startStream" class="flex-1 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded transition-colors">
                                Start Stream
                            </button>
                            <button id="stopStream" class="flex-1 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded transition-colors" disabled>
                                Stop Stream
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Stream Info -->
                <div class="bg-gray-800/50 rounded-lg p-6 backdrop-blur-sm">
                    <div class="flex items-center justify-between mb-4">
                        <h2 class="text-xl font-semibold">Stream Information</h2>
                        <div class="flex gap-2">
                            <button id="clearLogs" class="text-sm bg-gray-700 hover:bg-gray-600 px-3 py-1 rounded transition-colors">
                                Clear Logs
                            </button>
                            <button id="exportLogs" class="text-sm bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded transition-colors">
                                Export Logs
                            </button>
                        </div>
                    </div>
                    <div id="logsContent" class="h-96 overflow-y-auto space-y-2 font-mono text-sm"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const ws = new WebSocket(`ws://${window.location.host}`);
        let isStreaming = false;

        const logManager = {
            logs: [],
            maxLogs: 1000,

            addLog(type, message) {
                const log = {
                    type,
                    message,
                    timestamp: new Date()
                };
                this.logs.unshift(log);
                if (this.logs.length > this.maxLogs) {
                    this.logs.pop();
                }
                this.render();
            },

            render() {
                const logsDiv = document.getElementById('logsContent');
                logsDiv.innerHTML = this.logs.map(log => {
                    const bgClass = log.type === 'error' ? 'bg-red-900/30' : 
                                  log.type === 'ffmpeg' ? 'bg-blue-900/30' : 'bg-gray-800/50';
                    
                    let content = log.message;
                    if (log.type === 'ffmpeg' && log.message.startsWith('Starting FFmpeg')) {
                        content = `<div class="ffmpeg-command">${log.message}</div>`;
                    }

                    return `
                        <div class="log-entry ${bgClass} rounded px-3 py-2">
                            <div class="flex items-start gap-2">
                                <span class="text-xs text-gray-500">${moment(log.timestamp).format('HH:mm:ss.SSS')}</span>
                                <span class="flex-1 break-all">${content}</span>
                            </div>
                        </div>
                    `;
                }).join('');
            },

            clear() {
                this.logs = [];
                this.render();
            },

            export() {
                const text = this.logs.map(log => 
                    `[${moment(log.timestamp).format('YYYY-MM-DD HH:mm:ss.SSS')}] [${log.type}] ${log.message}`
                ).join('\n');
                
                const blob = new Blob([text], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `stream-logs-${moment().format('YYYY-MM-DD-HH-mm-ss')}.txt`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }
        };

        function updateStreamStatus(status, className) {
            const statusElement = document.getElementById('streamStatus');
            statusElement.textContent = status;
            statusElement.className = `px-4 py-2 rounded-full text-sm font-semibold ${className}`;
        }

        function updateStreamControls(streaming) {
            document.getElementById('startStream').disabled = streaming;
            document.getElementById('stopStream').disabled = !streaming;
            document.getElementById('streamKey').disabled = streaming;
            document.getElementById('audioUrl').disabled = streaming;
            isStreaming = streaming;
        }

        // WebSocket event handlers
        ws.onopen = () => {
            logManager.addLog('info', 'Connected to server');
            updateStreamStatus('Ready', 'bg-gray-800');
        };

        ws.onclose = () => {
            logManager.addLog('error', 'Disconnected from server');
            updateStreamStatus('Disconnected', 'bg-red-500');
            updateStreamControls(false);
        };

        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            
            if (data.type === 'status') {
                updateStreamControls(data.isStreaming);
                updateStreamStatus(
                    data.isStreaming ? 'Streaming' : 'Stopped',
                    data.isStreaming ? 'bg-green-500' : 'bg-gray-800'
                );
            }
            else if (data.type === 'error') {
                logManager.addLog('error', data.error);
                if (data.details) {
                    logManager.addLog('error', data.details);
                }
                updateStreamStatus('Error', 'bg-red-500');
                updateStreamControls(false);
            }
            else if (data.type === 'log') {
                logManager.addLog(data.type, data.message);
            }
            else if (data.type === 'progress') {
                // Update progress information if needed
                console.log('Progress:', data);
            }
        };

        // Button event handlers
        document.getElementById('startStream').addEventListener('click', () => {
            const streamKey = document.getElementById('streamKey').value.trim();
            const audioUrl = document.getElementById('audioUrl').value.trim();

            if (!streamKey || !audioUrl) {
                logManager.addLog('error', 'Stream key and audio URL are required');
                return;
            }

            ws.send(JSON.stringify({
                type: 'start',
                config: {
                    streamKey,
                    audioUrl
                }
            }));
        });

        document.getElementById('stopStream').addEventListener('click', () => {
            ws.send(JSON.stringify({ type: 'stop' }));
        });

        document.getElementById('clearLogs').addEventListener('click', () => {
            logManager.clear();
        });

        document.getElementById('exportLogs').addEventListener('click', () => {
            logManager.export();
        });

        // Save and restore settings
        const savedSettings = localStorage.getItem('streamSettings');
        if (savedSettings) {
            const settings = JSON.parse(savedSettings);
            document.getElementById('streamKey').value = settings.streamKey || '';
            document.getElementById('audioUrl').value = settings.audioUrl || '';
        }

        ['streamKey', 'audioUrl'].forEach(id => {
            document.getElementById(id).addEventListener('change', () => {
                const settings = {
                    streamKey: document.getElementById('streamKey').value,
                    audioUrl: document.getElementById('audioUrl').value
                };
                localStorage.setItem('streamSettings', JSON.stringify(settings));
            });
        });
    </script>
</body>
</html>